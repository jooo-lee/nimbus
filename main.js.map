{"version":3,"file":"main.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2DAA2D,UAAU,iBAAiB,OAAO;AAC7F;AACA;AACA;AACA;AACA;;AAEA;AACA,wDAAwD,gBAAgB;AACxE;;AAEA,aAAa;AACb;;AAEA,wDAAe,cAAc,EAAC;;;ACtB9B;AACA;AACA;AACA;;AAE8C;;AAE9C;;AAEA;AACA,YAAY,0BAA0B,QAAQ,iBAAc;AAC5D;AACA,+DAA+D,IAAI,OAAO,IAAI,SAAS,MAAM,SAAS,OAAO;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oDAAe,UAAU,EAAC;;;ACjCY;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,aAAU;AACtC,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,wBAAwB;AACvF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,+CAA+C,kCAAkC;AACjF,4CAA4C,qBAAqB;AACjE,yCAAyC,sBAAsB;;AAE/D;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wDAAe,cAAc,EAAC;;;AClFgB;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,iBAAc;AACtB;AACA;AACA,KAAK;AACL;;AAEA,4DAAe,kBAAkB,EAAC;;;ACxBY;;AAE9C;AACA;AACA;AACA;AACA,QAAQ,iBAAc;AACtB,KAAK;AACL;;AAEA,0DAAe,gBAAgB,EAAC;;;ACVc;AACQ;AACJ;;AAElD;AACA,IAAI,iBAAc;AAClB,IAAI,qBAAkB;AACtB,IAAI,mBAAgB;AACpB;;AAEA,iDAAe,OAAO,EAAC;;;ACVS;AACT;;AAEvB,UAAO","sources":["webpack://nimbus/./src/js/getCoordinates.js","webpack://nimbus/./src/js/getWeather.js","webpack://nimbus/./src/js/displayWeather.js","webpack://nimbus/./src/js/initSearchCityForm.js","webpack://nimbus/./src/js/initUnitsToggler.js","webpack://nimbus/./src/js/initDom.js","webpack://nimbus/./src/js/index.js"],"sourcesContent":["/**\n * Uses direct geocoding from Geocoding API to return latitude and longitude when\n * provided a city name.\n * https://openweathermap.org/api/geocoding-api\n */\n\nconst getCoordinates = async function getCoordinates(cityInput, apiKey) {\n    const response = await fetch(\n        `https://api.openweathermap.org/geo/1.0/direct?q=${cityInput}&limit=1&appid=${apiKey}`\n    );\n    const coordinates = await response.json();\n    const lat = coordinates[0].lat;\n    const lon = coordinates[0].lon;\n    const city = coordinates[0].name;\n\n    // Convert country code to country name\n    const regionNames = new Intl.DisplayNames(['en'], { type: 'region' });\n    const country = regionNames.of(coordinates[0].country);\n\n    return { lat, lon, city, country };\n};\n\nexport default getCoordinates;\n","/**\n * Returns current weather data of provided city using OpenWeather API.\n * https://openweathermap.org/current\n */\n\nimport getCoordinates from './getCoordinates';\n\nconst apiKey = '89ab6f6729c23a478a56b4f4bbd36f45';\n\nconst getWeather = async function getWeather(cityInput, units) {\n    const { lat, lon, city, country } = await getCoordinates(cityInput, apiKey);\n    const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=${units}&appid=${apiKey}`\n    );\n    const weatherData = await response.json();\n    const description = weatherData.weather[0].description;\n    const weatherIcon = weatherData.weather[0].icon;\n    const temperature = weatherData.main.temp;\n    const feelsLike = weatherData.main.feels_like;\n    const humidity = weatherData.main.humidity;\n    const windSpeed = weatherData.wind.speed;\n    return {\n        city,\n        country,\n        description,\n        weatherIcon,\n        temperature,\n        feelsLike,\n        humidity,\n        windSpeed,\n    };\n};\n\nexport default getWeather;\n","import getWeather from './getWeather';\n\nconst displayWeather = async function displayWeather(cityInput) {\n    // Hide weather display and its error message and show loader while fetching data\n    const weatherDisplay = document.querySelector('#weather-display');\n    weatherDisplay.style.display = 'none';\n    const weatherDisplayError = document.querySelector(\n        '#weather-display-error'\n    );\n    weatherDisplayError.style.display = 'none';\n    const loader = document.querySelector('#weather-display-loader');\n    loader.style.display = 'initial';\n\n    const unitsToggler = document.querySelector('#units-toggler');\n    const units = unitsToggler.checked ? 'imperial' : 'metric';\n\n    // Attempt to fetch data, display error message if it fails\n    let weatherData;\n    try {\n        weatherData = await getWeather(cityInput, units);\n    } catch (error) {\n        loader.style.display = 'none';\n        weatherDisplayError.style.display = 'initial';\n        weatherDisplayError.textContent =\n            \"Sorry, we couldn't find that location.\";\n        return;\n    }\n\n    const cityElem = document.querySelector('#city');\n    const countryElem = document.querySelector('#country');\n    const descriptionElem = document.querySelector('#description');\n    const temperatureElem = document.querySelector('#temperature');\n    const feelsLikeElem = document.querySelector('#feels-like');\n    const humidityElem = document.querySelector('#humidity');\n    const windSpeedElem = document.querySelector('#wind-speed');\n\n    cityElem.textContent = weatherData.city;\n    countryElem.textContent = weatherData.country;\n\n    /**\n     * Hardcoding the weather icon <img> element in HTML causes the missing image\n     * icon to appear the first time the page is loaded, so we dynamically create\n     * the <img> element here.\n     */\n    let weatherIconElem = document.querySelector('#weather-icon');\n    if (!weatherIconElem) {\n        // Only create <img> element once, first time page is loaded\n        weatherIconElem = document.createElement('img');\n    }\n    weatherIconElem.src = `https://openweathermap.org/img/wn/${weatherData.weatherIcon}@2x.png`;\n    weatherIconElem.alt = 'Weather icon';\n    weatherIconElem.id = 'weather-icon';\n    countryElem.after(weatherIconElem);\n\n    // Capitalize first letter of description\n    descriptionElem.textContent =\n        weatherData.description.charAt(0).toUpperCase() +\n        weatherData.description.slice(1);\n\n    temperatureElem.textContent = Math.round(weatherData.temperature);\n    feelsLikeElem.textContent = `Feels like: ${Math.round(weatherData.feelsLike)}`;\n    humidityElem.textContent = `Humidity: ${weatherData.humidity}%`;\n    windSpeedElem.textContent = `Wind: ${weatherData.windSpeed}`;\n\n    // Add appropriate units of measurement\n    if (units === 'metric') {\n        temperatureElem.textContent += ' 째C';\n        feelsLikeElem.textContent += ' 째C';\n        windSpeedElem.textContent += ' m/s';\n    } else if (units === 'imperial') {\n        temperatureElem.textContent += ' 째F';\n        feelsLikeElem.textContent += ' 째F';\n        windSpeedElem.textContent += ' mph';\n    } else {\n        throw new Error('Invalid unit of measurement!');\n    }\n\n    // Successfully fetched data, hide loader and show weather display\n    loader.style.display = 'none';\n    weatherDisplay.style.display = 'flex';\n};\n\nexport default displayWeather;\n","import displayWeather from './displayWeather';\n\nconst initSearchCityForm = function initializeSearchCityForm() {\n    const cityInputField = document.querySelector('#city-input');\n    const searchCityform = document.querySelector('#search-city');\n    searchCityform.addEventListener('submit', (event) => {\n        event.preventDefault();\n\n        // Display error message if city input field is empty\n        if (!cityInputField.value.trim().length) {\n            const weatherDisplayError = document.querySelector(\n                '#weather-display-error'\n            );\n            weatherDisplayError.style.display = 'initial';\n            weatherDisplayError.textContent = 'Please enter a city.';\n            return;\n        }\n\n        displayWeather(cityInputField.value);\n        searchCityform.reset();\n        cityInputField.blur();\n    });\n};\n\nexport default initSearchCityForm;\n","import displayWeather from './displayWeather';\n\nconst initUnitsToggler = function initializeUnitsToggler() {\n    const unitsToggler = document.querySelector('#units-toggler');\n    unitsToggler.addEventListener('click', () => {\n        const city = document.querySelector('#city');\n        displayWeather(city.textContent);\n    });\n};\n\nexport default initUnitsToggler;\n","import displayWeather from './displayWeather';\nimport initSearchCityForm from './initSearchCityForm';\nimport initUnitsToggler from './initUnitsToggler';\n\nconst initDom = function initializeDom() {\n    displayWeather('Toronto');\n    initSearchCityForm();\n    initUnitsToggler();\n};\n\nexport default initDom;\n","import initDom from './initDom';\nimport '../styles.css';\n\ninitDom();\n"],"names":[],"sourceRoot":""}